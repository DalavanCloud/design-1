%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G29) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 445 409
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 445 409
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.82352942 0.63529414 0.16470589 sc
q
73.099998 2.2 m
64.5 24.1 62 29.700001 59.799999 31.700001 c
56.799999 34.400002 57.599998 36 61.799999 36 c
63.799999 36 67.199997 36.299999 69.300003 36.599998 c
72.300003 37.099998 73 37 73 35.599998 c
73 34.700001 71.900002 33.5 70.5 33 c
68.199997 32.099998 68 31.799999 69.099998 29.799999 c
69.800003 28.5 71.599998 24.299999 73.099998 20.5 c
75.800003 13.5 l
78.900002 20.5 l
82.599998 28.6 83.800003 33 82.099998 33 c
81.5 33 81 33.700001 81 34.5 c
81 35.700001 82.5 36 88.5 36 c
94.5 36 96 35.700001 96 34.5 c
96 33.700001 95.400002 33 94.800003 33 c
91.5 32.900002 90.699997 31.4 91.900002 27.4 c
94.300003 19.700001 96.199997 15 96.900002 15 c
97.400002 15 99.199997 18.6 100.9 23.1 c
103.8 30.5 104 31.4 102.6 32.900002 c
100.3 35.400002 101.5 36 109.2 36 c
114.6 36 116 35.700001 116 34.5 c
116 33.599998 115.2 32.700001 114.3 32.400002 c
113.3 32.099998 111.9 31.5 111.1 31.200001 c
109.5 30.299999 101.3 11.4 99.800003 4.8000002 c
98.699997 0.1 96.900002 -1.3 95.300003 1.2 c
94.300003 2.9000001 90.300003 12.2 88 18.5 c
86.099998 23.5 l
84 18.5 l
82.800003 15.7 80.800003 10.6 79.5 7 c
77.099998 0 74.699997 -1.8 73.099998 2.2 c
h
W
0 0 445 409 rc
52.99828 41.874516 m
121 41.874516 l
121 -5.0224476 l
52.99828 -5.0224476 l
h
f
Q
q
181.8 3 m
178.3 5.6999998 176.7 11 176.7 19.299999 c
176.8 24.799999 177.3 26.799999 179.3 29.9 c
182.2 34.299999 187.2 37 192.39999 37 c
196.60001 37 197.8 35.200001 196.10001 31.4 c
195.2 29.299999 194.60001 29 191.3 29.6 c
188.10001 30.1 187.10001 29.799999 185 27.5 c
183 25.4 182.5 23.799999 182.5 19.700001 c
182.5 16.799999 183.10001 13 183.89999 11.2 c
185.2 8.1999998 185.60001 7.9000001 188.39999 8.3999996 c
190 8.8000002 192.39999 10 193.60001 11.1 c
194.89999 12.3 196.3 12.9 196.8 12.6 c
199.7 10.8 192.7 2.7 187.39999 1.6 c
185.2 1.1 183.7 1.5 181.8 3 c
h
W
0 0 445 409 rc
171.7 42 m
202.47928 42 l
202.47928 -3.6042337 l
171.7 -3.6042337 l
h
f
Q
q
240.7 1.7 m
234.3 2.0999999 233.3 4 238.89999 5.0999999 c
240.7 5.5 242.60001 6.1999998 243.2 6.8000002 c
244.39999 8 247 27.700001 246.3 29.9 c
246 30.799999 244.8 32.5 243.8 33.599998 c
241.60001 36.099998 242 36.5 247.10001 37.5 c
252.10001 38.400002 253.10001 37.099998 256.39999 25.1 c
258 19.6 259.60001 15 259.89999 15 c
260.29999 15 262.60001 19.6 265 25.200001 c
267.29999 30.9 269.60001 35.900002 270.10001 36.400002 c
270.60001 36.900002 273 37.5 275.5 37.599998 c
278.89999 37.700001 280.29999 37.299999 281 36 c
282.10001 33.900002 280.5 32 277.29999 32 c
274.29999 32 273.5 28.799999 274.39999 20.1 c
275.5 8.3000002 275.89999 7.1999998 279.70001 5.9000001 c
285.70001 3.9000001 283 2.5 272.60001 2.2 c
263.70001 2 262.89999 2.0999999 263.20001 3.7 c
263.39999 4.9000001 264.60001 5.5999999 266.89999 5.8000002 c
270 6.0999999 270.20001 6.3000002 269.60001 9.1999998 c
269.29999 10.9 269 14 269 16.1 c
269 18.299999 268.70001 20 268.29999 20 c
267.5 20 262.60001 12.7 260 7.5999999 c
259.20001 5.9000001 258 4.5 257.5 4.3000002 c
256.89999 4.0999999 255.39999 7.5 254.10001 11.7 c
252.8 16 251.60001 20.200001 251.3 21 c
250.5 23.700001 249.3 20.1 248.5 12.7 c
247.89999 6.4000001 248 5.6999998 249.89999 4.3000002 c
252.39999 2.5999999 251.8 0.89999998 248.7 1.2 c
247.5 1.3 243.89999 1.5 240.7 1.7 c
h
W
0 0 445 409 rc
230.23898 42.728321 m
287.84573 42.728321 l
287.84573 -3.834645 l
230.23898 -3.834645 l
h
f
Q
q
118.7 2.7 m
117.4 3.9000001 118 4.5999999 121.3 5.8000002 c
124.6 7 l
124.8 19 l
125 31 124.9 31.1 122.5 32 c
121.1 32.5 120 33.599998 120 34.5 c
120 35.700001 121.5 36 128.3 36 c
132.8 36 137.5 36.299999 138.7 36.599998 c
140.5 37.099998 141.2 36.599998 142.39999 33.5 c
144.5 28.700001 144.39999 27.6 142.3 28.5 c
136 31.200001 133.39999 31.799999 132.3 30.799999 c
131 29.799999 130.5 21.9 131.60001 20.799999 c
131.89999 20.5 133.8 20.6 135.8 21.1 c
140.2 22.1 141.5 21.1 140.60001 17.5 c
140.10001 15.4 139.5 15 138.2 15.6 c
135 16.9 131.2 17.200001 130.60001 16.1 c
130.2 15.5 130.2 13.5 130.60001 11.5 c
131.2 8.3000002 131.5 8 134.5 8 c
136.39999 8 139 8.3999996 140.39999 9 c
143.8 10.3 144.60001 8.6999998 142.3 5.4000001 c
140.5 3 139.8 2.8 129.89999 2.4000001 c
124.1 2.2 119 2.3 118.7 2.7 c
h
W
0 0 445 409 rc
113.06189 41.767933 m
148.92589 41.767933 l
148.92589 -2.7 l
113.06189 -2.7 l
h
f
Q
q
148.7 2.8 m
146.2 3.3 147 6.4000001 149.7 6.8000002 c
151.60001 7.0999999 152 8 152.5 12.8 c
152.8 15.9 153.3 20.6 153.60001 23.200001 c
154.10001 28.1 153.10001 29.9 148.5 32.599998 c
143.7 35.299999 152.89999 37.700001 162 36 c
170.7 34.400002 174 29.299999 170.39999 23 c
168.8 20.4 168.8 20.200001 170.89999 18.1 c
173.7 15.3 173.8 8.8000002 171.10001 6.0999999 c
167.60001 2.5999999 157.7 1.2 148.7 2.8 c
h
164.8 8.6000004 m
167.39999 10.4 167.8 15.5 165.39999 16.4 c
160.89999 18.1 158 15.9 158 10.7 c
158 6.5999999 160.8 5.6999998 164.8 8.6000004 c
h
163.10001 21 m
165.7 22.4 165.7 28.5 163.2 29.9 c
160.60001 31.299999 159 29.4 159 25 c
159 20 159.8 19.299999 163.10001 21 c
h
W
0 0 445 409 rc
142.18349 41.568619 m
178.06404 41.568619 l
178.06404 -2.858181 l
142.18349 -2.858181 l
h
f
Q
q
285.29999 3.7 m
284.39999 6 285.89999 8 288.5 8 c
291.39999 8 291.20001 7.5 291.5 21.799999 c
291.70001 32 l
289.10001 32.700001 l
285.29999 33.599998 284.79999 34 285.89999 35.400002 c
286.60001 36.200001 289.60001 36.400002 297.20001 35.799999 c
308.5 35 310.20001 34 311.5 27.4 c
312.60001 21.1 307.70001 15.1 302.5 16.4 c
299.20001 17.200001 299.29999 18.6 302.79999 20.200001 c
305.10001 21.299999 305.5 22.200001 305.5 25.5 c
305.5 28.9 305.10001 29.6 302.89999 30.4 c
297.79999 32.099998 297.5 31.299999 297.79999 18.700001 c
298.10001 7.4000001 298.20001 7.1999998 300.60001 6.5999999 c
302.20001 6.1999998 303 5.3000002 302.79999 4.4000001 c
302.39999 2.3 286.10001 1.6 285.29999 3.7 c
h
W
0 0 445 409 rc
280.03757 41.148865 m
316.65594 41.148865 l
316.65594 -2.5679717 l
280.03757 -2.5679717 l
h
f
Q
q
314.20001 2.8 m
312.20001 3.4000001 312.89999 5.5999999 315.5 6.8000002 c
318.5 8.1999998 323.39999 17.6 327 29 c
329.39999 36.599998 330 37.5 332.29999 37.799999 c
334.5 38.099998 335 37.700001 335.5 35.299999 c
336.39999 30.9 340 14.9 341.10001 10.9 c
341.79999 7.9000001 342.60001 7.0999999 345.10001 6.5999999 c
346.89999 6.3000002 348 5.5 347.79999 4.8000002 c
347.29999 3.5 332 2.3 332 3.5 c
332 3.9000001 333 5 334.10001 5.9000001 c
336.10001 7.5 336.20001 7.9000001 334.89999 11.4 c
333.39999 15.7 332.10001 16.5 328.60001 15.6 c
325.70001 14.9 324.20001 9.1999998 326.20001 6.0999999 c
326.89999 5 327.20001 3.9000001 327 3.7 c
326.29999 3.0999999 315.60001 2.3 314.20001 2.8 c
h
332.79999 23.200001 m
332.60001 25 332.10001 26.5 331.5 26.5 c
331 26.5 330.39999 25 330.20001 23.200001 c
329.89999 20.799999 330.29999 20 331.5 20 c
332.70001 20 333.10001 20.799999 332.79999 23.200001 c
h
W
0 0 445 409 rc
308.04446 42.886406 m
352.82336 42.886406 l
352.82336 -2.3572123 l
308.04446 -2.3572123 l
h
f
Q
q
354 3.0999999 m
354 4.5999999 357 6.8000002 360 7.5 c
363.70001 8.3000002 364.20001 9.8999996 363.79999 21.5 c
363.5 30.5 l
358.39999 30.799999 l
353.5 31.1 353.20001 30.9 352 28 c
350.29999 23.9 348 24 348.10001 28.200001 c
348.20001 30 348.5 32.599998 348.89999 33.900002 c
349.5 36.299999 349.5 36.299999 366 36.400002 c
375.10001 36.400002 383.20001 36.700001 384 37 c
385.20001 37.400002 385.5 36.400002 385.5 32 c
385.5 27.9 385.10001 26.5 384 26.5 c
383.20001 26.5 382.29999 27.6 382 29 c
381.5 31.299999 380.89999 31.5 376.5 31.5 c
371.5 31.5 l
371.5 20 l
371.5 8.5 l
374.5 7.5 l
378.79999 6.0999999 380 5.0999999 379.39999 3.5999999 c
379.10001 2.7 375.70001 2.3 366.5 2.3 c
359.60001 2.3 354 2.5999999 354 3.0999999 c
h
W
0 0 445 409 rc
343.09683 42.080627 m
390.5 42.080627 l
390.5 -2.7 l
343.09683 -2.7 l
h
f
Q
q
206.89999 5.3000002 m
199.89999 10 198.10001 23 203.39999 31 c
205.39999 34.099998 206.8 35 210.89999 36 c
221.7 38.599998 232.39999 32.5 233.7 23.1 c
234.39999 17.700001 230.10001 8.3000002 225.5 5.1999998 c
220.60001 2.0999999 211.60001 2.0999999 206.89999 5.3000002 c
h
221.89999 8.3999996 m
227.2 11.2 228.5 18.5 224.89999 25 c
222.39999 29.299999 219.7 31.1 215 31.299999 c
210.7 31.6 207.89999 27.9 207.2 21.200001 c
206.8 16.5 207 16 211 11.6 c
215.5 6.6999998 217.39999 6.0999999 221.89999 8.3999996 c
h
W
0 0 445 409 rc
195.32571 41.602158 m
238.77519 41.602158 l
238.77519 -2.1126487 l
195.32571 -2.1126487 l
h
f
Q
q
20.200001 63.799999 m
20.799999 65.400002 219.89999 406.5 221.2 408.29999 c
222.39999 409.89999 233.10001 392 319.5 243.8 c
372.79999 152.3 418.29999 74.199997 420.70001 70.199997 c
425 63 l
222.39999 63 l
111 63 20 63.400002 20.200001 63.799999 c
h
418.70001 66.699997 m
418.39999 67.199997 374.89999 141.7 322 232.5 c
269.10001 323.20001 225.39999 397.89999 224.89999 398.5 c
224.39999 399 224 371.89999 224 328.29999 c
224 257.10001 l
228.3 256.5 l
238.39999 255 246.60001 247.7 247.7 239.2 c
248.3 235 l
222.60001 235 l
197.5 235 197 235 197 237 c
197 245.5 206.3 254.39999 217.3 256.39999 c
221 257.10001 l
221 328 l
221 367.10001 220.7 399 220.3 399 c
219.60001 399 27.1 69.699997 26.200001 66.900002 c
26 66.400002 99.5 66 222.5 66 c
330.60001 66 418.89999 66.300003 418.70001 66.699997 c
h
244 240.10001 m
244 242.5 239.8 248 236.3 250.10001 c
233.8 251.7 230.60001 252.5 225.60001 252.8 c
217.2 253.3 211.2 251.89999 207 248.39999 c
204.3 246.10001 201 241.2 201 239.5 c
201 239.2 210.7 239 222.5 239 c
237.8 239 244 239.3 244 240.10001 c
h
W
0 0 445 409 rc
15.199671 413.39191 m
430 413.39191 l
430 58 l
15.199671 58 l
h
f
Q
q
212.5 101.6 m
185.39999 105.8 169.10001 124.8 169 152.2 c
169 166.7 172.2 175.5 183.10001 190.60001 c
188.7 198.5 195 210.10001 195 212.8 c
195 213.8 200.8 214 222.2 213.8 c
249.3 213.5 l
251.10001 208.39999 l
253 202.7 254 201 261.79999 190 c
272.20001 175.5 275.10001 167.10001 275.10001 152.3 c
275.10001 136.10001 271.10001 125.5 261.70001 116.1 c
256.20001 110.6 248.3 106 240 103.6 c
234.5 101.9 218.10001 100.8 212.5 101.6 c
h
237.5 106.5 m
260.5 112.4 273.29999 130.8 271.70001 155.89999 c
271.10001 167.3 268.39999 173.89999 259.20001 187.5 c
255 193.5 250.3 201.3 248.7 204.7 c
245.8 211 l
222.2 211 l
198.5 211 l
194.8 203.2 l
192.7 199 187.89999 191 184 185.5 c
173.8 170.89999 170.89999 160.39999 173 144.5 c
175.39999 125.6 187 112.2 205.5 106.9 c
213.3 104.6 229.5 104.5 237.5 106.5 c
h
W
0 0 445 409 rc
164 218.86969 m
280.10001 218.86969 l
280.10001 96.333702 l
164 96.333702 l
h
f
Q
q
210.5 125.1 m
210.10001 125.7 210.8 127.2 211.89999 128.39999 c
214.89999 131.60001 213.89999 135.8 209.8 137.2 c
206.39999 138.39999 205 140.7 205 145 c
205 152.89999 212.60001 159 222.39999 159 c
228 159 228.10001 158.89999 229.60001 155.5 c
230.39999 153.5 231.7 151.7 232.60001 151.3 c
233.7 150.89999 233.89999 149.89999 233.5 148.10001 c
233 145.89999 233.39999 145.10001 235.39999 144.2 c
238.2 143 240.8 136.39999 239.2 134.8 c
237.7 133.3 236.3 134.5 235.7 137.8 c
234.89999 141.7 231.2 143.39999 228.3 141 c
226.10001 139.3 226.10001 139.2 228 137.5 c
229.39999 136.2 230 134.39999 230 131.3 c
230 127.7 229.7 127 228 127 c
226.39999 127 226 127.7 226 130.8 c
226 135.5 224.60001 137 220.2 137 c
216.89999 137 216.89999 136.89999 217.10001 133 c
217.39999 130 216.89999 128.5 215 126.5 c
212.39999 123.8 211.5 123.4 210.5 125.1 c
h
222.60001 141.89999 m
228 144.3 230.5 147.8 228.60001 149.89999 c
227.8 150.8 226.89999 152.5 226.60001 153.7 c
224.60001 160.10001 208 152.5 208 145.2 c
208 140 215 138.5 222.60001 141.89999 c
h
W
0 0 445 409 rc
200 164 m
244.68942 164 l
244.68942 119.08075 l
200 119.08075 l
h
f
Q
q
234.5 153.5 m
228.89999 159 232.7 169 240.5 169 c
245.5 169 249 165.39999 249 160.2 c
249 152 240 147.89999 234.5 153.5 c
h
243.5 155.39999 m
247.3 158.10001 244.89999 166 240.3 166 c
238.3 166 235 162.3 235 160 c
235 157.7 238.3 154 240.3 154 c
241 154 242.5 154.60001 243.5 155.39999 c
h
W
0 0 445 409 rc
226.8329 174 m
254 174 l
254 145.92023 l
226.8329 145.92023 l
h
f
Q
q
211.89999 162.39999 m
204.2 165.10001 200 170.10001 200 176.60001 c
200 181 203 185 206.3 185 c
207.3 185 208.5 186.10001 209 187.39999 c
211.10001 193 219 193.7 224.60001 188.8 c
230.8 183.39999 232.3 177 230 166.3 c
228.89999 161.5 l
222.2 161.3 l
218.5 161.3 213.89999 161.7 211.89999 162.39999 c
h
216.8 170.7 m
213.7 173.89999 210.7 177.5 210.10001 178.7 c
208.10001 182.60001 203 181 203 176.5 c
203 170.5 210.10001 165.10001 218 165 c
222.39999 165 l
216.8 170.7 l
h
227.3 171.39999 m
228.10001 177.10001 226.7 182 223.3 185.2 c
216.5 191.60001 209.2 188.3 213.10001 180.7 c
214.3 178.3 225 167 226.10001 167 c
226.39999 167 227 169 227.3 171.39999 c
h
W
0 0 445 409 rc
195 197.07678 m
236.02039 197.07678 l
236.02039 156.3 l
195 156.3 l
h
f
Q
q
195 225.5 m
195 232 l
222.5 232 l
250 232 l
250 225.5 l
250 219 l
222.5 219 l
195 219 l
195 225.5 l
h
247 225 m
247 228 l
222.5 228 l
198 228 l
198 225.7 l
198 224.39999 198.3 223 198.7 222.7 c
199 222.3 210.10001 222 223.2 222 c
247 222 l
247 225 l
h
W
0 0 445 409 rc
190 237 m
255 237 l
255 214 l
190 214 l
h
f
Q
q
18.9 124.8 m
13.7 128.2 6.9000001 135.39999 4.4000001 140.10001 c
3.5 142 2.0999999 145.7 1.4 148.5 c
-0.2 154.2 -0.5 165 0.89999998 165 c
2.9000001 165 17.299999 150.3 20.1 145.60001 c
23 140.5 l
23 154.60001 l
23 168.60001 l
18.1 173.7 l
11 181.10001 7.6999998 188.60001 7.1999998 199 c
7 203.8 7.3000002 209.39999 8 211.8 c
9 215.5 9.3000002 216 10.6 214.89999 c
13.6 212.39999 21.299999 200.8 23.5 195.39999 c
25.700001 190 l
27.9 201.2 l
29.200001 207.39999 31.299999 216.2 32.599998 220.89999 c
35.099998 229.39999 l
32 235.39999 l
28 243.39999 26.6 252.2 28 260.29999 c
29.200001 266.60001 33.700001 278 35 278 c
36.799999 278 43 261.5 43 256.89999 c
43 252.5 44.599998 252.7 46.400002 257.29999 c
47.299999 259.60001 51.099998 266.79999 55 273.20001 c
61.900002 284.89999 l
59.700001 289.70001 l
57.900002 293.70001 57.5 296.29999 57.5 305 c
57.5 315 57.700001 315.79999 61.200001 323.20001 c
63.200001 327.5 65.300003 331 65.900002 331 c
68.599998 331 73.699997 310 72.699997 302.89999 c
72.199997 299 l
83.300003 310.60001 l
94.5 322.29999 l
95.199997 329.79999 l
96 338.29999 99.800003 347.39999 104.9 353.29999 c
108.2 357 119.9 365.39999 120.7 364.60001 c
121.7 363.70001 118.8 349.29999 116.6 343.79999 c
115.3 340.60001 114.4 338 114.7 338 c
114.9 338 117.7 339.70001 120.8 341.79999 c
123.9 343.89999 129.2 347.29999 132.60001 349.29999 c
138.7 352.89999 138.7 353 139.3 358.39999 c
140.39999 369.10001 147 378.79999 157.2 384.89999 c
161 387.20001 l
161 384.29999 l
161 379.70001 158.10001 370 155.10001 364.39999 c
152.3 359.20001 l
158 359.70001 l
163.7 360.29999 175 357.79999 175 356.10001 c
175 354.89999 164.2 349.39999 159.10001 348 c
153.60001 346.60001 143.7 346.5 141.10001 348 c
139.39999 348.79999 137.60001 348.20001 130.7 344.10001 c
123 339.5 106 327.5 106 326.60001 c
106 326.39999 107.9 326.89999 110.3 327.70001 c
115.1 329.39999 129.89999 329 136.39999 327 c
140.2 325.79999 l
137.89999 323.29999 l
134.39999 319.60001 120.4 313.20001 113.2 312.10001 c
106.8 311.10001 97.900002 311.89999 94.099998 313.89999 c
92.400002 314.79999 91.199997 313.89999 84.599998 306.89999 c
80.5 302.5 76.199997 297.70001 75.099998 296.10001 c
73.099998 293.39999 l
77.800003 295.70001 l
85.400002 299.39999 101.9 301.5 103.5 299 c
105 296.60001 91.800003 284.60001 83.099998 280.29999 c
79 278.20001 75.800003 277.5 69.400002 277.20001 c
61 276.70001 l
56 268 l
51.099998 259.5 47.700001 252.3 43.799999 242.60001 c
41.900002 237.7 l
45.900002 241.3 l
48.099998 243.3 52.099998 246.10001 54.799999 247.39999 c
60.099998 250.10001 68.699997 252.60001 69.599998 251.7 c
70.599998 250.8 66.199997 242 61.5 235.5 c
56.099998 227.89999 48.900002 222.39999 41.200001 220 c
35.599998 218.2 l
33.799999 211.39999 l
32.900002 207.60001 31.799999 202.7 31.4 200.5 c
30.799999 196.60001 l
35.900002 202.2 l
38.799999 205.3 43.299999 209.3 46.099998 210.89999 c
51 214 l
51 210.7 l
51 206 47.5 193 44.900002 187.8 c
41.5 181.10001 38.400002 177.5 32.400002 173.39999 c
27 169.7 27 169.60001 27 164.5 c
27 161.60001 26.700001 157.10001 26.4 154.39999 c
25.9 149.5 l
29 155.2 l
30.799999 158.3 34.400002 163.3 37 166.2 c
41.799999 171.5 l
42.5 167.7 l
42.900002 165.7 43 159.39999 42.799999 153.7 c
42.5 145.2 42 142.5 39.700001 137.5 c
36.5 130.60001 28.6 122 25.5 122 c
24.299999 122 21.4 123.3 18.9 124.8 c
h
21.4 131.7 m
20 140.10001 13.8 150.10001 6.0999999 156.60001 c
2.9000001 159.2 l
3.5999999 154.89999 l
4.9000001 146.2 8.1000004 139.89999 13.9 133.8 c
20.700001 126.9 22.4 126.4 21.4 131.7 c
h
35.5 137 m
36.700001 139.5 38.299999 143.89999 38.900002 146.8 c
40.200001 152.89999 40.400002 163 39.200001 163 c
38.700001 163 37.5 161.7 36.299999 160.2 c
30.4 152.2 27.4 142.10001 28.6 133.7 c
29.200001 128.89999 29.200001 128.89999 31.200001 130.7 c
32.299999 131.7 34.200001 134.5 35.5 137 c
h
22.799999 182.2 m
22.299999 190.3 19.6 197.39999 14.5 204.60001 c
11.2 209.3 l
10.5 204.7 l
9.3000002 196.8 12.9 184.8 18.4 178.2 c
22.6 173.3 23.299999 174 22.799999 182.2 c
h
35 180 m
37.099998 182.10001 40.099998 186.2 41.5 189 c
44.200001 194.3 47.5 205.8 46.599998 206.7 c
46.400002 207 43.799999 205.10001 41.099998 202.5 c
35.299999 197.10001 30.5 188 29.5 180.7 c
28.700001 174.89999 29.700001 174.7 35 180 c
h
48.400002 227.3 m
54.799999 231.39999 65.400002 244.89999 63.599998 246.7 c
62.5 247.89999 53.5 243.39999 49 239.3 c
44 234.8 41 230.60001 39 225.60001 c
38 222.8 38 222.8 40.700001 223.5 c
42.299999 223.8 45.700001 225.5 48.400002 227.3 c
h
39.400002 251 m
39.299999 257.89999 38.700001 262 37.200001 266 c
35.200001 271.5 l
33.400002 267.5 l
32.099998 264.60001 31.6 260.89999 31.6 254 c
31.5 246 31.9 243.7 33.900002 239.5 c
36.200001 234.5 l
37.900002 238 l
39 240.5 39.5 244.10001 39.400002 251 c
h
81.599998 283.5 m
87.199997 286.20001 97 293.79999 97 295.29999 c
97 296.89999 85.699997 295.39999 80.699997 293.20001 c
76.099998 291.10001 66 282.60001 66 280.70001 c
66 279 76 280.79999 81.599998 283.5 c
h
68.5 306.5 m
68.400002 314.20001 67.900002 318.5 66.900002 321 c
65.300003 324.5 l
63.599998 320.5 l
59.5 310.89999 59.200001 300.60001 62.700001 291.89999 c
64.300003 287.70001 l
66.400002 291.60001 l
68.199997 294.89999 68.5 297.20001 68.5 306.5 c
h
117.1 316.60001 m
123.5 318.5 132 322.70001 132 323.89999 c
132 324.89999 126.2 326 120.9 326 c
119 326 114.9 325.29999 111.9 324.39999 c
106.6 322.79999 98 318.20001 98 316.79999 c
98 314.70001 110.1 314.60001 117.1 316.60001 c
h
104.3 331.5 m
106.3 333.5 109.2 337.10001 110.6 339.60001 c
113.3 344.20001 117.4 356.89999 116.5 357.79999 c
115.6 358.70001 108.7 352.70001 105.6 348.29999 c
103.9 345.89999 101.7 341.79999 100.8 339.20001 c
99 334.20001 98.400002 328 99.800003 328 c
100.3 328 102.3 329.60001 104.3 331.5 c
h
162.60001 353.10001 m
167.5 355.5 l
160.8 355.79999 l
155.60001 356 152.89999 355.60001 149.10001 353.89999 c
146.3 352.70001 144.3 351.29999 144.7 350.79999 c
145.7 349 157.3 350.60001 162.60001 353.10001 c
h
147.60001 360.20001 m
149.3 362 151.39999 364.70001 152.2 366.10001 c
154.10001 369.20001 157.2 379.10001 156.5 379.89999 c
155.39999 380.89999 147.7 372.29999 145.39999 367.5 c
143.10001 362.60001 142.2 357 143.8 357 c
144.2 357 146 358.5 147.60001 360.20001 c
h
W
0 0 445 409 rc
-4.9948831 392.20001 m
180 392.20001 l
180 117 l
-4.9948831 117 l
h
f
Q
q
411.20001 127.5 m
403.5 135.89999 401.60001 141.8 401.5 156.7 c
401.5 163.39999 401.89999 169.2 402.29999 169.7 c
403.60001 170.89999 411.70001 161.60001 415 155.10001 c
417.89999 149.5 l
417.89999 153 l
418 154.89999 417.70001 159.5 417.39999 163.10001 c
416.70001 169.8 l
411.29999 173.60001 l
401.79999 180.39999 395.29999 192.7 393.60001 207.2 c
393.10001 211.3 393.20001 213 394 213 c
397 213 408.20001 203.3 412.39999 197 c
414 194.5 l
413.39999 198 l
413 199.89999 411.79999 205.3 410.60001 209.89999 c
408.5 218.3 l
402.89999 220 l
395.70001 222.2 389 227 384.10001 233.39999 c
379.70001 239.10001 373.5 250.8 374.39999 251.7 c
375.29999 252.60001 384.10001 250.10001 389.5 247.39999 c
392.29999 246 396.20001 243.2 398.29999 241.2 c
400.29999 239.2 402 237.89999 402 238.3 c
402 240 392.5 260.39999 388.10001 268 c
383.29999 276.5 l
376.29999 276.70001 l
364.39999 277.10001 356.10001 281.20001 345.5 292 c
340.60001 296.89999 339.79999 298.20001 341 299 c
344.60001 301.29999 358.60001 299.39999 366.20001 295.70001 c
372.29999 292.70001 371.60001 293.89999 360.89999 305.29999 c
353.70001 313 352.29999 314.10001 350.10001 313.60001 c
339.20001 311.20001 336.79999 311 330.79999 312 c
323.70001 313.20001 309.39999 319.89999 306.10001 323.39999 c
303.89999 325.70001 l
309.79999 327.39999 l
316.89999 329.39999 329.10001 329.39999 334.5 327.5 c
336.70001 326.70001 338.70001 326 339 326 c
339.20001 326 335.39999 329 330.5 332.60001 c
320.39999 340 306.10001 348.70001 304.60001 348.20001 c
299.89999 346.70001 293.29999 346.20001 288.79999 347 c
283.20001 348 269 354.5 269 356 c
269 357.70001 276.60001 359.5 284.10001 359.5 c
291.70001 359.5 l
288.79999 364.70001 l
286 369.70001 282.20001 384.5 283.39999 385.79999 c
284.39999 386.70001 290 383.20001 294.79999 378.60001 c
300.5 373.20001 304.10001 366.10001 304.79999 358.79999 c
305.29999 353 l
313.89999 347.89999 l
318.60001 345.10001 323.89999 341.79999 325.5 340.5 c
330.79999 336.70001 331.39999 336.5 329.70001 339.10001 c
327.89999 341.89999 324.39999 353.70001 323.60001 359.70001 c
322.89999 364.89999 323.79999 365.10001 329.5 361.39999 c
341.79999 353.20001 348.89999 340.89999 349 327.60001 c
349.10001 322.5 l
360.60001 310.70001 l
372 298.89999 l
371.39999 302.79999 l
370.29999 309.79999 375.70001 331.60001 378.39999 330.70001 c
380.5 330.10001 385.89999 317.5 386.89999 310.89999 c
388.10001 303.39999 387 295 383.89999 288.60001 c
382 284.60001 l
386 278.60001 l
388.10001 275.20001 392.39999 267.79999 395.39999 262 c
400.39999 252.5 401 251.8 401 255 c
401 260.79999 407.10001 278 409 278 c
410.29999 278 415.10001 266 416.20001 260 c
417.70001 252.3 416 242.39999 411.89999 235.10001 c
409 229.60001 l
412 219.10001 l
413.60001 213.3 415.70001 204.3 416.60001 199.2 c
418.29999 189.8 l
422 197.7 l
426.39999 207 433.79999 216.60001 435.39999 215 c
436.10001 214.3 436.5 209.10001 436.5 202.2 c
436.5 191.60001 436.29999 190 433.79999 184.7 c
432.29999 181.60001 428.79999 176.60001 426.10001 173.7 c
421 168.3 l
421 153.89999 l
421 139.5 l
423.29999 144 l
425.89999 149.2 436.39999 160.7 441 163.39999 c
444.29999 165.3 l
443.79999 156.89999 l
443.29999 147.7 440.60001 140.2 435.29999 133.5 c
431.79999 129 421.5 122 418.5 122 c
417 122 414.5 123.9 411.20001 127.5 c
h
429.39999 132.60001 m
434.89999 137.8 439.60001 147.10001 440.5 154.5 c
441.10001 159.5 l
434.70001 152.89999 l
427.79999 145.8 424.5 140 423.10001 132.7 c
422 126.6 423.20001 126.6 429.39999 132.60001 c
h
415.60001 140.2 m
415.29999 143.3 414.29999 147.8 413.39999 150.2 c
411.29999 155.3 406.29999 163 405 163 c
403.60001 163 403.79999 154.5 405.39999 146.8 c
407 139.5 409.10001 134.7 412.29999 131.2 c
414.5 128.89999 l
415.29999 131.7 l
415.70001 133.2 415.89999 137.10001 415.60001 140.2 c
h
425.60001 178.2 m
430.20001 183.7 433.10001 191.3 433.70001 199.39999 c
434.10001 204.3 433.89999 206.89999 433.20001 207.39999 c
431.60001 208.39999 425 197.8 422.79999 190.7 c
420.89999 184.5 420.39999 175 421.89999 175 c
422.39999 175 424.10001 176.5 425.60001 178.2 c
h
414.5 180.7 m
413.39999 188.39999 409.39999 196.2 403.5 202 c
400.5 205 397.79999 207.2 397.60001 206.89999 c
396.70001 206 400 194 402.5 188.89999 c
405 184 412.29999 176 414.20001 176 c
414.79999 176 415 177.8 414.5 180.7 c
h
406 223.5 m
406 226 400.10001 234.60001 395.60001 238.8 c
390.39999 243.5 381.70001 248 380.39999 246.7 c
379.20001 245.5 389.20001 232 393.89999 228.60001 c
399.89999 224.2 406 221.60001 406 223.5 c
h
410.89999 241.60001 m
412.20001 245 413 249.5 413 253.39999 c
413 259.89999 410.60001 270 409 270 c
407.60001 270 405 260.39999 404.29999 252.89999 c
403.70001 246.10001 406.20001 234.39999 408 235.5 c
408.5 235.8 409.79999 238.5 410.89999 241.60001 c
h
374.5 285 m
368.10001 291.5 360.89999 295 352.79999 295.70001 c
346.5 296.29999 l
350 292.60001 l
357 285.20001 367.20001 280.20001 375.5 280.10001 c
379.39999 280 l
374.5 285 l
h
381.79999 292.20001 m
384.29999 298.70001 384.5 308.20001 382.10001 315.79999 c
380.89999 319.70001 379.60001 323.20001 379 323.5 c
375.70001 325.5 374.20001 299.5 377.20001 292.70001 c
379.29999 288.20001 380.20001 288.10001 381.79999 292.20001 c
h
345.60001 316.29999 m
347.29999 318 336.89999 323.5 328.89999 325.20001 c
323.20001 326.39999 312 325.5 312 323.89999 c
312 322.70001 319.10001 319.10001 326 316.79999 c
331.5 315 344 314.70001 345.60001 316.29999 c
h
345.39999 331.20001 m
344 339.89999 341 345.89999 334.70001 352.29999 c
330.79999 356.29999 328.5 358 328.20001 357.10001 c
327.29999 354.5 331.20001 343.20001 334.79999 337.60001 c
337.79999 333.20001 344.10001 327 345.70001 327 c
345.89999 327 345.70001 328.89999 345.39999 331.20001 c
h
299.39999 350.89999 m
300.60001 352.70001 290.29999 356 283.39999 356 c
275.5 356 275.70001 354.79999 284.20001 351.89999 c
289.79999 350 298.5 349.39999 299.39999 350.89999 c
h
300.89999 360.89999 m
300.39999 363 299.60001 365.89999 299 367.39999 c
298 370.10001 289.29999 380 288 380 c
286.79999 380 288.79999 372.39999 291.10001 367.70001 c
293.5 363 298.79999 357 300.60001 357 c
301.5 357 301.60001 358 300.89999 360.89999 c
h
W
0 0 445 409 rc
264 390.94183 m
449.29999 390.94183 l
449.29999 117 l
264 117 l
h
f
ep
end
%%Trailer
%%EOF
